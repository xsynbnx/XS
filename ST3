import base64
exec(base64.b64decode('#!/usr/bin/env python
import sys
import re
import os
import importlib.util
import hashlib
import shutil

# ANSI转义序列定义颜色
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
CYAN = '\033[96m'
ENDC = '\033[0m'


def load_py_config(config_path):
    try:
        spec = importlib.util.spec_from_file_location("config_module", config_path)
        config_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(config_module)
        return config_module
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"{RED}错误:导入Py配置文件时出错: {e}{ENDC}")
        sys.exit(1)


def decimal_to_hex_little_endian(number):
    hex_str = number.to_bytes(4, byteorder='little').hex()
    return hex_str


def swap_hex_bytes(content, hex1, hex2):
    bytes1 = bytes.fromhex(hex1)
    bytes2 = bytes.fromhex(hex2)

    indices1 = [m.start() for m in re.finditer(re.escape(bytes1), content)]
    indices2 = [m.start() for m in re.finditer(re.escape(bytes2), content)]

    if len(indices1) == 0 or len(indices2) == 0:
        return content, False

    swap_count = min(len(indices1), len(indices2))

    new_content = bytearray(content)

    for i in range(swap_count):
        index1 = indices1[i]
        index2 = indices2[i]

        len1 = len(bytes1)
        len2 = len(bytes2)

        if len1 != len2:
            print(f"{RED}错误: 十六进制值 '{hex1}' 和 '{hex2}' 的字节长度不同，无法互换。{ENDC}")
            return content, False

        new_content[index1:index1 + len1] = bytes2
        new_content[index2:index2 + len2] = bytes1

    return new_content, True


def calculate_file_hash(file_path):
    hash_object = hashlib.md5()
    with open(file_path, 'rb') as file:
        while True:
            data = file.read(65536)
            if not data:
                break
            hash_object.update(data)
    return hash_object.hexdigest()


def find_matching_dat_files(search_path, keyword):
    matching_files = []
    for root, dirs, files in os.walk(search_path):
        for file in files:
            if file.endswith('.dat') and keyword.lower() in file.lower():
                matching_files.append(os.path.join(root, file))
    return matching_files


def main():
    print(f"{CYAN}公告{ENDC}")
    print(f"{CYAN}**到第二步查找dat名字加群获得名称{ENDC}")
    print(f"{RED}一定要加入群聊才知道dat的名称主页有群聊哦{ENDC}")
    # 1. 获取配置文件路径
    config_path = input("请输入配置文件的完整路径: ").strip()
    while not os.path.isfile(config_path):
        print(f"{RED}错误:文件不存在，请重新输入{ENDC}")
        config_path = input("请输入配置文件的完整路径: ").strip()

    # 2. 加载配置文件
    config = load_py_config(config_path)
    if config is None:
        print(f"{RED}错误:无法加载配置文件{ENDC}")
        sys.exit(1)

    配置 = config.配置
    if not 配置:
        print(f"{RED}错误: 配置文件中没有定义任何十进制数对{ENDC}")
        sys.exit(1)

    # 3. 设置搜索路径和输出路径
    search_path = "/storage/emulated/0/全自动美化/解包dat/"
    output_path = "/storage/emulated/0/全自动美化/打包dat/"
    
    # 创建输出目录如果不存在
    os.makedirs(output_path, exist_ok=True)
    
    # 4. 获取要查找的文件名关键字
    keyword = input("请输入要查找的.dat文件名关键字: ").strip()
    matching_files = find_matching_dat_files(search_path, keyword)
    
    if not matching_files:
        print(f"{RED}错误: 在路径 '{search_path}' 中未找到包含 '{keyword}' 的.dat文件{ENDC}")
        sys.exit(1)
    
    # 5. 显示匹配的文件让用户选择
    print(f"\n{YELLOW}找到以下匹配的文件:{ENDC}")
    for i, file_path in enumerate(matching_files, 1):
        print(f"{i}. {os.path.basename(file_path)} (路径: {os.path.dirname(file_path)})")

    # 6. 获取用户选择的文件
    while True:
        try:
            choice = input("\n请选择要修改的文件编号或输入s退出: ").strip()
            if choice.lower() == 's':
                print(f"{YELLOW}已取消操作{ENDC}")
                sys.exit(0)
                
            choice = int(choice)
            if 1 <= choice <= len(matching_files):
                dat_file_path = matching_files[choice - 1]
                break
            else:
                print(f"{RED}错误: 请输入1-{len(matching_files)}之间的数字{ENDC}")
        except ValueError:
            print(f"{RED}错误: 请输入有效的数字或s退出{ENDC}")

    # 7. 记录修改结果
    success_pairs = []
    failed_pairs = []

    try:
        # 计算修改前的哈希值
        hash_before = calculate_file_hash(dat_file_path)

        with open(dat_file_path, 'rb') as file:
            content = file.read()

        total_pairs = len(配置)

        print(f"\n{GREEN}开始处理文件: {os.path.basename(dat_file_path)}{ENDC}")
        print(f"{CYAN}共需要处理 {total_pairs} 对配置{ENDC}")

        for index, (dec1, dec2) in enumerate(配置, start=1):
            hex1 = decimal_to_hex_little_endian(dec1)
            hex2 = decimal_to_hex_little_endian(dec2)

            print(f"\n{YELLOW}正在处理第 {index}/{total_pairs} 对数值{ENDC}")
            print(f"模式1: {BLUE}{hex1}{ENDC} → 替换为 {BLUE}{hex2}{ENDC}")
            print(f"模式2: {BLUE}{hex2}{ENDC} → 替换为 {BLUE}{hex1}{ENDC}")

            bytes1 = bytes.fromhex(hex1)
            bytes2 = bytes.fromhex(hex2)
            indices1 = [m.start() for m in re.finditer(re.escape(bytes1), content)]
            indices2 = [m.start() for m in re.finditer(re.escape(bytes2), content)]

            print(f"找到模式1的位置: {YELLOW}{indices1}{ENDC}")
            print(f"找到模式2的位置: {YELLOW}{indices2}{ENDC}")

            content, swapped = swap_hex_bytes(content, hex1, hex2)
            if swapped:
                swap_count = min(len(indices1), len(indices2))
                print(f"{GREEN}成功交换 {swap_count} 处{ENDC}")
                success_pairs.append((dec1, dec2))
            else:
                print(f"{RED}交换失败{ENDC}")
                failed_pairs.append((dec1, dec2))

        # 构建输出文件路径
        output_file_path = os.path.join(output_path, os.path.basename(dat_file_path))
        
        # 写入修改后的内容到输出路径
        with open(output_file_path, 'wb') as file:
            file.write(content)

        # 计算修改后的哈希值
        hash_after = calculate_file_hash(output_file_path)

        # 显示结果摘要
        print(f"\n{CYAN}______处理结果________{ENDC}")
        print(f"{GREEN}成功修改文件: {os.path.basename(dat_file_path)}{ENDC}")
        print(f"原始文件路径: {dat_file_path}")
        print(f"修改后文件保存到: {output_file_path}")
        print(f"前MD5: {hash_before}")
        print(f"后MD5: {hash_after}")
        print(f"\n{GREEN}成功处理 {len(success_pairs)}/{total_pairs} 对配置{ENDC}")
        
        if failed_pairs:
            print(f"{RED}以下配置对处理失败: {failed_pairs}{ENDC}")
        else:
            print(f"{GREEN}所有配置对都处理成功!{ENDC}")

    except Exception as e:
        print(f"{RED}处理文件时发生错误: {e}{ENDC}")
        sys.exit(1)


if __name__ == "__main__":
    main()

').decode('utf-8'))